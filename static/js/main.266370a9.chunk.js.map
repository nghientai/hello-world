{"version":3,"sources":["components/Footer.js","components/TaskSearchControl.js","actions/index.js","constants/actionTypes.js","components/TaskItem.js","components/TaskList.js","components/TaskForm.js","components/TaskSortControl.js","App.js","reducers/tasks.js","reducers/displayForm.js","reducers/itemEditting.js","reducers/filter.js","reducers/filterByKeywords.js","reducers/sortByName.js","reducers/index.js","index.js"],"names":["Footer","className","Component","TaskSearchControl","props","onChange","event","target","name","value","setState","onSearch","state","keyword","this","placeholder","onClick","type","connect","dispatch","actions","TaskItem","onUpdateStatus","task","id","onDeleteItem","onEditItem","openForm","index","scope","status","TaskList","onFilter","filterName","filterStatus","taskItems","filter","tasks","toLowerCase","indexOf","console","log","length","colSpan","map","key","filterTable","filterByKeyWords","sortByName","v","filterData","TaskForm","resetState","onSubmit","preventDefault","onSaveTask","onChaneHandle","onCancel","onClear","taskEditing","isShowingForm","required","toggleForm","itemEditting","TaskSortControl","onSort","App","data","JSON","parse","localStorage","getItem","initialState","findIndex","result","forEach","s4","Math","floor","random","toString","substring","guid","reducers","action","newTaks","push","setItem","stringify","splice","parseInt","sortName","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.266370a9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div>\n        <footer className=\"my-5 pt-5 text-muted text-center text-small\">\n          <p className=\"mb-1\">&copy; Bootstrap</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass TaskSearchControl extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: \"\"\n        };\n    }\n\n    onChange = event => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    onSearch = () => {\n        this.props.onSearch(this.state.keyword);\n    };\n\n    render() {\n        var { keyword } = this.state;\n        return (\n            <div className=\"col-6\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control\"\n                        name=\"keyword\"\n                        placeholder=\"Type something...\"\n                        value={keyword}\n                        onChange={this.onChange}\n                    />\n                    <span className=\"input-group-btn\">\n                        <button\n                            onClick={this.onSearch}\n                            className=\"btn btn-primary\"\n                            type=\"button\"\n                        >\n                            Search\n                        </button>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = () => {\n    return {};\n};\nconst mapActionsToProps = dispatch => {\n    return {\n        onSearch: keyword => {\n            return dispatch(actions.searchByKeywords(keyword));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(TaskSearchControl);\n","import * as types from \"../constants/actionTypes\";\n\nexport const listAll = () => {\n    return {\n        type: types.LIST_ALL\n    };\n};\n\nexport const saveTask = task => {\n    return {\n        type: types.SAVE_TASK,\n        task\n    };\n};\n\nexport const toggleForm = () => {\n    return {\n        type: types.TOGGLE_FORM\n    };\n};\n\nexport const onOpenForm = () => {\n    return {\n        type: types.OPEN_FORM\n    };\n};\n\nexport const updateOnSingleItem = id => {\n    return {\n        type: types.UPDATE_SINGLE_STATUS,\n        id\n    };\n};\n\nexport const deleteSingleItem = id => {\n    return {\n        type: types.DELETE_SINGLE_ITEM,\n        id\n    };\n};\n\nexport const editItem = task => {\n    return {\n        type: types.EDIT_ITEM,\n        task\n    };\n};\n\nexport const filterTable = filterData => {\n    return {\n        type: types.TABLE_FILTER,\n        filterData\n    };\n};\nexport const searchByKeywords = keyword => {\n    return {\n        type: types.SEARCH_BY_KEYWORD,\n        keyword\n    };\n};\nexport const sortByName = v => {\n    return {\n        type: types.SORT_BY_NAME,\n        v\n    };\n};\n","export const LIST_ALL = \"LIST_ALL\";\nexport const SAVE_TASK = \"SAVE_TASK\";\nexport const TOGGLE_FORM = \"TOGGLE_FORM\";\nexport const OPEN_FORM = \"OPEN_FORM\";\nexport const UPDATE_SINGLE_STATUS = \"UPDATE_SINGLE_STATUS\";\nexport const DELETE_SINGLE_ITEM = \"DELETE_SINGLE_ITEM\";\nexport const EDIT_ITEM = \"EDIT_ITEM\";\nexport const TABLE_FILTER = \"TABLE_FILTER\";\nexport const SEARCH_BY_KEYWORD = \"SEARCH_BY_KEYWORD\";\nexport const SORT_BY_NAME = \"SORT_BY_NAME\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass TaskItem extends Component {\n    onUpdateStatus = () => {\n        this.props.onUpdateStatus(this.props.task.id);\n    };\n\n    onDeleteItem = () => {\n        this.props.onDeleteItem(this.props.task.id);\n    };\n    onEditItem = () => {\n        this.props.openForm();\n        this.props.onEditItem(this.props.task);\n    };\n\n    render() {\n        var { task, index } = this.props;\n\n        return (\n            <tr>\n                <th scope=\"row\">{index}</th>\n                <td>{task.name} </td>\n                <td>\n                    <span\n                        className={\n                            task.status === true\n                                ? \"badge badge-success\"\n                                : \"badge badge-danger\"\n                        }\n                        onClick={this.onUpdateStatus}\n                    >\n                        {task.status === true ? \"Active\" : \"Completed\"}\n                    </span>\n                </td>\n                <td className=\"text-center\">\n                    <button\n                        onClick={this.onEditItem}\n                        type=\"button\"\n                        className=\"btn btn-warning\"\n                    >\n                        Edit\n                    </button>\n                    <button\n                        onClick={this.onDeleteItem}\n                        type=\"button\"\n                        className=\"btn btn-danger ml-2\"\n                    >\n                        Delete\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateStatus: id => {\n            dispatch(actions.updateOnSingleItem(id));\n        },\n        onDeleteItem: id => {\n            dispatch(actions.deleteSingleItem(id));\n        },\n        onEditItem: task => {\n            dispatch(actions.editItem(task));\n        },\n        openForm: () => {\n            dispatch(actions.onOpenForm());\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(TaskItem);\n","import React, { Component } from \"react\";\nimport TaskItem from \"./TaskItem\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass TaskList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterName: \"\",\n            filterStatus: -1\n        };\n    }\n\n    onChange = event => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n\n        this.props.onFilter({\n            filterName: name === \"filterName\" ? value : this.state.filterName,\n            filterStatus:\n                name === \"filterStatus\" ? value : this.state.filterStatus\n        });\n        this.setState({\n            [name]: value\n        });\n    };\n\n    render() {\n        var taskItems;\n        var { filterName, filterStatus } = this.props.filter;\n        var { keyword } = this.props.keyword;\n        var { tasks } = this.props;\n\n        if (filterName) {\n            tasks = tasks.filter(task => {\n                return task.name.toLowerCase().indexOf(filterName) !== -1;\n            });\n        }\n        console.log(this.props);\n\n        tasks = tasks.filter(task => {\n            if (filterStatus === -1) {\n                return task;\n            } else {\n                return task.status === (filterStatus === 1 ? true : false);\n            }\n        });\n\n        if (keyword) {\n            tasks = tasks.filter(task => {\n                return task.name.toLowerCase().indexOf(keyword) !== -1;\n            });\n        }\n\n        if (tasks.length === 0) {\n            //console.log(this.props.tasks.length);\n            taskItems = (\n                <tr>\n                    <td colSpan=\"4\">No items</td>\n                </tr>\n            );\n        } else {\n            taskItems = tasks.map((task, index) => {\n                return <TaskItem key={task.id} task={task} index={index + 1} />;\n            });\n        }\n\n        return (\n            <table className=\"table mt-3\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Status</th>\n                        <th scope=\"col\" className=\"text-center\">\n                            Action\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"filterName\"\n                                value={filterName}\n                                onChange={this.onChange}\n                            />\n                        </td>\n                        <td>\n                            <select\n                                className=\"form-control\"\n                                name=\"filterStatus\"\n                                value={filterStatus}\n                                onChange={this.onChange}\n                            >\n                                <option value=\"-1\">All</option>\n                                <option value=\"0\">Completed</option>\n                                <option value=\"1\">Active</option>\n                            </select>\n                        </td>\n                        <td></td>\n                    </tr>\n                    {taskItems}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.tasks,\n        filter: state.filterTable,\n        keyword: state.filterByKeyWords,\n        sortByName: state.v\n    };\n};\n\nconst mapActionsToProps = dispatch => {\n    return {\n        onFilter: filterData => {\n            dispatch(actions.filterTable(filterData));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(TaskList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass TaskForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            name: \"\",\n            status: true\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.taskEditing) {\n            //console.log(task);\n            this.setState({\n                id: this.props.taskEditing.id,\n                name: this.props.taskEditing.name,\n                status: this.props.taskEditing.status\n            });\n        }\n    }\n\n    //Use getDerivedStateFromProps instead of componentWillReceiveProps\n    componentWillReceiveProps(props) {\n        if (props && props.taskEditing) {\n            this.setState({\n                id: props.taskEditing.id,\n                name: props.taskEditing.name,\n                status: props.taskEditing.status\n            });\n        } else {\n            this.resetState();\n        }\n    }\n\n    resetState = () => {\n        this.setState({\n            id: \"\",\n            name: \"\",\n            status: true\n        });\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n        this.setState(this.state);\n        this.props.onSaveTask(this.state);\n\n        if (typeof this.state.id === \"undefined\") {\n            this.resetState();\n        }\n    };\n\n    onChaneHandle = event => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n\n        this.setState({\n            [name]: value\n        });\n        //console.log(this.state);\n    };\n\n    onCancel = () => {\n        this.resetState();\n        //this.props.onCancel();\n    };\n    onClear = () => {\n        this.resetState();\n    };\n\n    render() {\n        //console.log(this.state.status);\n        if (!this.props.isShowingForm) return \"\";\n        return (\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Task name</label>\n                            <input\n                                type=\"text\"\n                                name=\"name\"\n                                className=\"form-control\"\n                                placeholder=\"Task name\"\n                                value={this.state.name}\n                                onChange={this.onChaneHandle}\n                                required\n                            />\n                            <input\n                                type=\"hidden\"\n                                name=\"id\"\n                                value={this.state.id}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Status</label>\n                            <select\n                                className=\"form-control\"\n                                name=\"status\"\n                                onChange={this.onChaneHandle}\n                                value={this.state.status}\n                            >\n                                <option value={true}>Active</option>\n                                <option value={false}>Completed</option>\n                            </select>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                            Submit\n                        </button>\n                        <button\n                            type=\"button\"\n                            onClick={this.onCancel}\n                            className=\"btn btn-danger ml-2\"\n                        >\n                            Cancel\n                        </button>\n                        <button\n                            type=\"button\"\n                            onClick={this.onClear}\n                            className=\"btn btn-danger ml-2\"\n                        >\n                            Clear\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isShowingForm: state.toggleForm,\n        taskEditing: state.itemEditting\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSaveTask: task => {\n            dispatch(actions.saveTask(task));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass TaskSortControl extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortByName: 0\n        };\n    }\n\n    onChange = event => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n\n        this.setState({\n            [name]: value\n        });\n        this.props.onSort(this.state);\n        //console.log(this.state);\n    };\n\n    render() {\n        return (\n            <div className=\"col-6\">\n                <div className=\"input-group\">\n                    <select\n                        className=\"form-control\"\n                        name=\"sortByName\"\n                        value={this.state.sortByName}\n                        onChange={this.onChange}\n                    >\n                        <option value=\"\">Sort by</option>\n                        <option value={1}>Name A-Z</option>\n                        <option value={-1}>Name Z-A</option>\n                    </select>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = () => {\n    return {};\n};\nconst mapActionsToProps = dispatch => {\n    return {\n        onSort: v => {\n            return dispatch(actions.sortByName(v));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(TaskSortControl);\n","import React, { Component } from \"react\";\nimport Footer from \"./components/Footer\";\nimport TaskSearchControl from \"./components/TaskSearchControl\";\nimport TaskList from \"./components/TaskList\";\nimport TaskForm from \"./components/TaskForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions\";\nimport TaskSortControl from \"./components/TaskSortControl\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    toggleForm = () => {\n        this.props.toggleForm();\n    };\n\n    render() {\n        var { isShowingForm } = this.props;\n\n        return (\n            <div className=\"container\">\n                {/* Logo */}\n                <div className=\"py-5 text-center\">\n                    <h2>Todo List App</h2>\n                </div>\n\n                <div className=\"row\">\n                    {/* Task Form */}\n                    <div\n                        className={\n                            isShowingForm === true\n                                ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\"\n                                : \"\"\n                        }\n                    >\n                        <TaskForm onCancel={this.onCancel} />\n                    </div>\n                    <div\n                        className={\n                            isShowingForm === true\n                                ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\"\n                                : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"\n                        }\n                    >\n                        {/* Buttons */}\n                        <button\n                            type=\"buton\"\n                            className=\"btn btn-primary\"\n                            onClick={this.toggleForm}\n                        >\n                            {isShowingForm ? \"Close Todo Form\" : \"Add Todo\"}\n                        </button>\n                        {/* Search Form */}\n                        <div className=\"row mt-3\">\n                            <TaskSearchControl />\n                            {/* <TaskSortControl /> */}\n                        </div>\n\n                        {/* List */}\n                        <TaskList />\n                    </div>\n                </div>\n\n                {/* Footer */}\n                <Footer />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isShowingForm: state.toggleForm\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        toggleForm: () => {\n            dispatch(actions.toggleForm());\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    LIST_ALL,\n    SAVE_TASK,\n    UPDATE_SINGLE_STATUS,\n    DELETE_SINGLE_ITEM\n} from \"../constants/actionTypes\";\n\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\nvar initialState = data ? data : [];\n\nvar reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case LIST_ALL:\n            return state;\n        case SAVE_TASK:\n            if (!action.task.id) {\n                var newTaks = {\n                    id: guid(),\n                    name: action.task.name,\n                    status: action.task.status == \"false\" ? false : true\n                };\n\n                state.push(newTaks);\n            } else {\n                var index = findIndex(state, action.task.id);\n                if (index !== -1) {\n                    state[index] = {\n                        ...state[index],\n                        name: action.task.name,\n                        status: action.task.status == \"false\" ? false : true\n                    };\n                }\n            }\n            localStorage.setItem(\"tasks\", JSON.stringify(state));\n            return [...state];\n        case UPDATE_SINGLE_STATUS:\n            var index = findIndex(state, action.id);\n            if (index !== -1) {\n                state[index] = {\n                    ...state[index],\n                    status: !state[index].status\n                };\n\n                localStorage.setItem(\"tasks\", JSON.stringify(state));\n            }\n            return [...state];\n        case DELETE_SINGLE_ITEM:\n            var index = findIndex(state, action.id);\n            if (index !== -1) {\n                state.splice(index, 1);\n\n                localStorage.setItem(\"tasks\", JSON.stringify(state));\n            }\n            return [...state];\n\n        default:\n            return state;\n    }\n};\n\nvar findIndex = (tasks, id) => {\n    let result = -1;\n    tasks.forEach((task, index) => {\n        if (task.id === id) {\n            result = index;\n        }\n    });\n    return result;\n};\n\nvar s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n};\n\nvar guid = () => {\n    return (\n        s4() +\n        s4() +\n        \"-\" +\n        s4() +\n        \"-\" +\n        s4() +\n        \"-\" +\n        s4() +\n        \"-\" +\n        s4() +\n        s4() +\n        s4()\n    );\n};\n\nexport default reducers;\n","import { TOGGLE_FORM, OPEN_FORM } from \"../constants/actionTypes\";\n\nvar initialState = false;\n\nvar reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_FORM:\n            return !state;\n        case OPEN_FORM:\n            return true;\n        default:\n            return state;\n    }\n};\nexport default reducers;\n","import { EDIT_ITEM } from \"../constants/actionTypes\";\n\nvar initialState = {\n    id: \"\",\n    name: \"\",\n    status: true\n};\n\nvar reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case EDIT_ITEM:\n            //console.log(action.task);\n            return action.task;\n        //return { ...state };\n        default:\n            return state;\n    }\n};\nexport default reducers;\n","import { TABLE_FILTER } from \"../constants/actionTypes\";\n\nvar initialState = {\n    filterName: \"\",\n    filterStatus: -1\n};\n\nvar reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case TABLE_FILTER:\n            var filterStatus = parseInt(action.filterData.filterStatus, 10);\n            state = {\n                filterName: action.filterData.filterName.toLowerCase(),\n                filterStatus: filterStatus\n            };\n\n            return { ...state };\n\n        default:\n            return state;\n    }\n};\nexport default reducers;\n","import { SEARCH_BY_KEYWORD } from \"../constants/actionTypes\";\n\nvar initialState = {\n    keyword: \"\"\n};\n\nvar reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case SEARCH_BY_KEYWORD:\n            state = {\n                keyword: action.keyword\n            };\n\n            return { ...state };\n        default:\n            return state;\n    }\n};\nexport default reducers;\n","import { SORT_BY_NAME } from \"../constants/actionTypes\";\n\nvar initialState = {\n    sortName: 0\n};\n\nvar reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case SORT_BY_NAME:\n            state = {\n                sortName: action.v\n            };\n\n            return state;\n        default:\n            return state;\n    }\n};\nexport default reducers;\n","import { combineReducers } from \"redux\";\nimport tasks from \"./tasks\";\nimport toggleForm from \"./displayForm\";\nimport itemEditting from \"./itemEditting\";\nimport filterTable from \"./filter\";\nimport filterByKeyWords from \"./filterByKeywords\";\nimport sortByName from \"./sortByName\";\n\nconst reducers = combineReducers({\n    tasks,\n    toggleForm,\n    itemEditting,\n    filterTable,\n    filterByKeyWords,\n    sortByName\n});\nexport default reducers;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { createStore } from \"redux\";\nimport reducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\n//Store\nconst store = createStore(\n    reducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}